// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.201217.4

#pragma once
#include "winrt/Unicord.Universal.Native.h"
namespace winrt::Unicord::Universal::Native::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) Shlwapi_base : implements<D, Unicord::Universal::Native::Shlwapi, I...>
    {
        using base_type = Shlwapi_base;
        using class_type = Unicord::Universal::Native::Shlwapi;
        using implements_type = typename Shlwapi_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"Unicord.Universal.Native.Shlwapi";
        }
    };
}
namespace winrt::Unicord::Universal::Native::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) ShlwapiT : implements<D, Windows::Foundation::IActivationFactory, Unicord::Universal::Native::IShlwapiStatics, I...>
    {
        using instance_type = Unicord::Universal::Native::Shlwapi;

        hstring GetRuntimeClassName() const
        {
            return L"Unicord.Universal.Native.Shlwapi";
        }
        auto AssocQueryString(Unicord::Universal::Native::ASSOCF const& flags, Unicord::Universal::Native::ASSOCSTR const& str, hstring const& pszAssoc, hstring const& pszExtra)
        {
            return T::AssocQueryString(flags, str, pszAssoc, pszExtra);
        }
        auto StrFormatByteSizeEx(uint64_t size, Unicord::Universal::Native::SFBSFlags const& flags)
        {
            return T::StrFormatByteSizeEx(size, flags);
        }
        [[noreturn]] Windows::Foundation::IInspectable ActivateInstance() const
        {
            throw hresult_not_implemented();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_SHLWAPI_XAML_G_H) || __has_include("Shlwapi.xaml.g.h")
#include "Shlwapi.xaml.g.h"
#else

namespace winrt::Unicord::Universal::Native::implementation
{
    template <typename D, typename... I>
    using ShlwapiT = Shlwapi_base<D, I...>;
}

#endif
